Peer Review Assignment - Data Engineer - ETL
Estimated time needed: 20 minutes

Objectives
In this final part you will:

Run the ETL process
Extract bank and market cap data from the JSON file bank_market_cap.json
Transform the market cap currency using the exchange rate data
Load the transformed data into a seperate CSV
For this lab, we are going to be using Python and several Python libraries. Some of these libraries might be installed in your lab environment or in SN Labs. Others may need to be installed by you. The cells below will install these libraries when executed.

#!mamba install pandas==1.3.3 -y
#!mamba install requests==2.26.0 -y
Imports
Import any additional libraries you may need here.

import glob
import pandas as pd
from datetime import datetime
As the exchange rate fluctuates, we will download the same dataset to make marking simpler. This will be in the same format as the dataset you used in the last section

!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0221EN-SkillsNetwork/labs/module%206/Lab%20-%20Extract%20Transform%20Load/data/bank_market_cap_1.json
!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0221EN-SkillsNetwork/labs/module%206/Lab%20-%20Extract%20Transform%20Load/data/bank_market_cap_2.json
!wget https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0221EN-SkillsNetwork/labs/module%206/Final%20Assignment/exchange_rates.csv
--2023-03-06 14:24:27--  https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0221EN-SkillsNetwork/labs/module%206/Lab%20-%20Extract%20Transform%20Load/data/bank_market_cap_1.json
Resolving cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)... 198.23.119.245
Connecting to cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)|198.23.119.245|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 2815 (2.7K) [application/json]
Saving to: ‘bank_market_cap_1.json’

bank_market_cap_1.j 100%[===================>]   2.75K  --.-KB/s    in 0s      

2023-03-06 14:24:27 (54.4 MB/s) - ‘bank_market_cap_1.json’ saved [2815/2815]

--2023-03-06 14:24:28--  https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0221EN-SkillsNetwork/labs/module%206/Lab%20-%20Extract%20Transform%20Load/data/bank_market_cap_2.json
Resolving cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)... 198.23.119.245
Connecting to cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)|198.23.119.245|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 1429 (1.4K) [application/json]
Saving to: ‘bank_market_cap_2.json’

bank_market_cap_2.j 100%[===================>]   1.40K  --.-KB/s    in 0s      

2023-03-06 14:24:28 (32.8 MB/s) - ‘bank_market_cap_2.json’ saved [1429/1429]

--2023-03-06 14:24:29--  https://cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud/IBMDeveloperSkillsNetwork-PY0221EN-SkillsNetwork/labs/module%206/Final%20Assignment/exchange_rates.csv
Resolving cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)... 198.23.119.245
Connecting to cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud (cf-courses-data.s3.us.cloud-object-storage.appdomain.cloud)|198.23.119.245|:443... connected.
HTTP request sent, awaiting response... 200 OK
Length: 590 [text/csv]
Saving to: ‘exchange_rates.csv’

exchange_rates.csv  100%[===================>]     590  --.-KB/s    in 0s      

2023-03-06 14:24:30 (18.3 MB/s) - ‘exchange_rates.csv’ saved [590/590]

Extract
JSON Extract Function
This function will extract JSON files.

def extract_from_json(file_to_process):
    dataframe = pd.read_json(file_to_process)
    return dataframe

def extract_from_csv(file_to_process):
    dataframe = pd.read_csv(file_to_process)
    return dataframe
Extract Function
Define the extract function that finds JSON file bank_market_cap_1.json and calls the function created above to extract data from them. Store the data in a pandas dataframe. Use the following list for the columns.

columns=['Name','Market Cap (US$ Billion)']
def extract():
    # Write your code here
    #create an empty dataframe using the above specified columns to extract and store data from the specific 'bank_market_cap_1.json' file *only* while ignoring all other files
    bankdata=pd.DataFrame(columns=['Name','Market Cap (US$ Billion)'])
    #process the file bank_market_cap_1.json
    for jsonfile in glob.glob("*.json"):
       bankdata=bankdata.append(extract_from_json("bank_market_cap_1.json"), ignore_index=True)
    return bankdata
#print(bankdata)
Question 1 Load the file exchange_rates.csv as a dataframe and find the exchange rate for British pounds with the symbol GBP, store it in the variable exchange_rate, you will be asked for the number. Hint: set the parameter index_col to 0.

# Write your code here
#process all csv files
ExchangeData = pd.read_csv("exchange_rates.csv", index_col = 0)
#exchange_rate = df_rate.loc['GBP']["Rates"]
#exchange_rate=ExchangeData.loc['GBP']["Rates"]     #locate rate that corresponds to 'GBP' value
exchange_rate=exchange_data.loc[exchange_data['Unnamed: 0'] == 'GBP']  #locate rate that corresponds to 'GBP' value
exchange_rate
Unnamed: 0	Rates
9	GBP	0.732398
Transform
Using exchange_rate and the exchange_rates.csv file find the exchange rate of USD to GBP. Write a transform function that

Changes the Market Cap (US$ Billion) column from USD to GBP
Rounds the Market Cap (US$ Billion)` column to 3 decimal places
Rename Market Cap (US$ Billion) to Market Cap (GBP$ Billion)
def transform(bank_market_cap):
    # Write your code here
    bank_market_cap['Market Cap (US$ Billion)']=round(bank_market_cap['Market Cap (US$ Billion)']*exchange_rate,3)
    bank_market_cap=bank_market_cap.rename(columns={'Market Cap (US$ Billion)':'Market Cap (GBP$ Billion)'}, inplace=False)
    return bank_market_cap
Load
Create a function that takes a dataframe and load it to a csv named bank_market_cap_gbp.csv. Make sure to set index to False.

targetfile = "bank_market_cap_gbp.csv"   # file where transformed data is stored

def load(targetfile, data_to_load):
    # Write your code here
    data_to_load.to_csv(targetfile)
Logging Function
Write the logging function log to log your data:

def log(message):
    timestamp_format = '%Y-%h-%d-%H:%M:%S' # Year-Month-Day-Hour-Minute-Second
    now = datetime.now() # get current timestamp
    timestamp = now.strftime(timestamp_format)
    print("Logging!")
    with open("logfile.txt","a") as f:
        f.write(timestamp + ',' + message + '\n')
Running the ETL Process
Log the process accordingly using the following "ETL Job Started" and "Extract phase Started"

# Write your code here
log("ETL Job Started")
log("Extract phase Started")
Logging!
Logging!
Extract
Question 2 Use the function extract, and print the first 5 rows, take a screen shot:

# Call the function here
BKD=extract()
# Print the rows here
#BKD.head()
<class 'pandas.core.frame.DataFrame'>
/tmp/wsuser/ipykernel_164/2952932508.py:7: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  bankdata=bankdata.append(extract_from_json("bank_market_cap_1.json"), ignore_index=True)
/tmp/wsuser/ipykernel_164/2952932508.py:7: FutureWarning: The frame.append method is deprecated and will be removed from pandas in a future version. Use pandas.concat instead.
  bankdata=bankdata.append(extract_from_json("bank_market_cap_1.json"), ignore_index=True)
Log the data as "Extract phase Ended"

# Write your code here
log("Extract phase Ended")
Logging!
Transform
Log the following "Transform phase Started"

# Write your code here
log("Transform phase Started")
Logging!
Question 3 Use the function transform and print the first 5 rows of the output, take a screen shot:

# Call the function here
transformed_data = transform(BKD)
# Print the first 5 rows here
transformed_data.head()
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
Input In [132], in <cell line: 2>()
      1 # Call the function here
----> 2 transformed_data = transform(BKD)
      3 # Print the first 5 rows here
      4 transformed_data.head()

Input In [129], in transform(bank_market_cap)
      1 def transform(bank_market_cap):
      2     # Write your code here
----> 3     bank_market_cap['Market Cap (US$ Billion)']=round(bank_market_cap['Market Cap (US$ Billion)']*exchange_rate,3)
      4     bank_market_cap=bank_market_cap.rename(columns={'Market Cap (US$ Billion)':'Market Cap (GBP$ Billion)'}, inplace=False)
      5     return bank_market_cap

File /opt/conda/envs/Python-3.10/lib/python3.10/site-packages/pandas/core/frame.py:3645, in DataFrame.__setitem__(self, key, value)
   3643     self._setitem_array(key, value)
   3644 elif isinstance(value, DataFrame):
-> 3645     self._set_item_frame_value(key, value)
   3646 elif (
   3647     is_list_like(value)
   3648     and not self.columns.is_unique
   3649     and 1 < len(self.columns.get_indexer_for([key])) == len(value)
   3650 ):
   3651     # Column to set is duplicated
   3652     self._setitem_array([key], value)

File /opt/conda/envs/Python-3.10/lib/python3.10/site-packages/pandas/core/frame.py:3775, in DataFrame._set_item_frame_value(self, key, value)
   3773 len_cols = 1 if is_scalar(cols) else len(cols)
   3774 if len_cols != len(value.columns):
-> 3775     raise ValueError("Columns must be same length as key")
   3777 # align right-hand-side columns if self.columns
   3778 # is multi-index and self[key] is a sub-frame
   3779 if isinstance(self.columns, MultiIndex) and isinstance(
   3780     loc, (slice, Series, np.ndarray, Index)
   3781 ):

ValueError: Columns must be same length as key
Log your data "Transform phase Ended"

# Write your code here
log ("Transform phase Ended")
Logging!
Load
Log the following "Load phase Started".

# Write your code here
log ("Load phase started")
Logging!
Call the load function

# Write your code here
load (targetfile, tansformed_data)
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
Input In [135], in <cell line: 2>()
      1 # Write your code here
----> 2 load (targetfile, tansformed_data)

NameError: name 'tansformed_data' is not defined
Log the following "Load phase Ended".

# Write your code here
log ("Load phase Ended")
log("ETL Job Ended")
Authors
Ramesh Sannareddy, Joseph Santrcangelo and Azim Hirjani

Other Contributors
Rav Ahuja

Change Log
Date (YYYY-MM-DD)	Version	Changed By	Change Description
2020-11-25	0.1	Ramesh Sannareddy	Created initial version of the lab
